/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package src;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

import src.EscaletorProcess.EscaletorType;

/**
 *
 * @author alecsanderfarias
 */
public class View extends javax.swing.JFrame implements Runnable {

	Control control;

	DefaultTableModel table1Reference;
	DefaultTableModel table2Reference;

	/**
	 * Creates new form View
	 *
	 * @param control
	 */
	public View(Control control) {
		this.control = control;
		initComponents();

		table1Reference = (DefaultTableModel) jTable1.getModel();
		table2Reference = (DefaultTableModel) jTable2.getModel();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        qtdProcesses = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        escaletorTypeSelector = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        totalTime = new javax.swing.JLabel();
        finishedsIds = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("Escalonador de processos");

        jLabel2.setText("Processos");

        jButton1.setText("Adicionar Processos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "BurstTime", "ArrivalTime", "Prioridade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTable1InputMethodTextChanged(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Processos");

        jButton2.setText("Simular");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        escaletorTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SJF", "SRTN", "RoundRobin", "Priority", "MultipleQueues" }));
        escaletorTypeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escaletorTypeSelectorActionPerformed(evt);
            }
        });

        jLabel4.setText("Tipo de escalonamento");

        totalTime.setText("Tempo total = 0");

        finishedsIds.setText("Processos finalizados: []");

        jLabel5.setText("Time Quantum:");

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel6.setText("OBS: Ao alterar o valor de qualquer coluna de qualquer linha é necessario apertar a tecla enter DUAS vezes na linha e coluna selecionada");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Burst Time", "Arrival Time", "Prioridade", "Progresso", "Finish Time", "Turnaround"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jTabbedPane2.addTab("Tabela", jScrollPane2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 921, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 221, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Gráfico de barras (FINAL)", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane2)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(41, 41, 41)
                        .addComponent(escaletorTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(totalTime)
                        .addGap(546, 546, 546)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(qtdProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(finishedsIds)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qtdProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(escaletorTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(finishedsIds)
                .addGap(52, 52, 52)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSpinner1StateChanged

	}// GEN-LAST:event_jSpinner1StateChanged

	private void escaletorTypeSelectorActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_escaletorTypeSelectorActionPerformed

		EscaletorType[] types = new EscaletorType[5];

		types[0] = EscaletorType.SJF;
		types[1] = EscaletorType.SRTN;
		types[2] = EscaletorType.RoundRobin;
		types[3] = EscaletorType.Priority;
		types[4] = EscaletorType.MultipleQueues;

		control.escaletorTypeSelected = types[escaletorTypeSelector.getSelectedIndex()];
	}// GEN-LAST:event_escaletorTypeSelectorActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		// TODO add your handling code here:

		int QueueTime = (Integer) this.jSpinner1.getValue();

		control.QueueTime = QueueTime;

		control.start();
	}// GEN-LAST:event_jButton2ActionPerformed

	private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jTable1KeyPressed
		// TODO add your handling code here:
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

			int row = jTable1.getSelectedRow();
			int column = jTable1.getSelectedColumn();

			// resul is the new value to insert in the DB
			String resul = jTable1.getValueAt(row, column).toString();
			// id is the primary key of my DB
			String id = jTable1.getValueAt(row, 0).toString();

			control.updateProcessConfig(Integer.parseInt(id), column, resul);

		}

		if (evt.getKeyCode() == KeyEvent.VK_DELETE) {

			int row = jTable1.getSelectedRow();
			String id = jTable1.getValueAt(row, 0).toString();

			control.removeProcess(Integer.parseInt(id));
		}

		this.attTable1();
	}// GEN-LAST:event_jTable1KeyPressed

	private void jTable1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {// GEN-FIRST:event_jTable1InputMethodTextChanged

	}// GEN-LAST:event_jTable1InputMethodTextChanged

	private void jTable1FocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jTable1FocusLost
		// TODO add your handling code here:
	}// GEN-LAST:event_jTable1FocusLost

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:

		// adicionar a quantidade processos na lista processesConfig
		int qtd = (Integer) this.qtdProcesses.getValue();

		control.addManyProcesses(qtd);

		attTable1();
	}// GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> escaletorTypeSelector;
    private javax.swing.JLabel finishedsIds;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JSpinner qtdProcesses;
    private javax.swing.JLabel totalTime;
    // End of variables declaration//GEN-END:variables

	public void attTable1() {
		// pegar os processos de configuração e colocar na table de configuração
		table1Reference.setRowCount(0);

		for (int i = 0; i < control.processesConfig.size(); i++) {
			EscaletorProcess pr = control.processesConfig.get(i);

			table1Reference.addRow(new Object[] { String.valueOf(pr.id), String.valueOf(pr.burstTime),
					String.valueOf(pr.arrivalTime), String.valueOf(pr.priority), });
		}

	}

	public int compareNumber(int p1, int p2) {
		if (p1 < p2) {
			return -1;
		}

		if (p1 > p2) {
			return +1;
		}

		return 0;
	}

	public void attTable2() {

		// pegar os processos de configuração e colocar na table de configuração
		table2Reference.setRowCount(0);

		if (control.processesRunnning != null) {

			ArrayList<EscaletorProcess> processes = (ArrayList<EscaletorProcess>) control.processesRunnning.clone();
			processes.sort(
					(EscaletorProcess p1, EscaletorProcess p2) -> this.compareNumber(p1.arrivalTime, p2.arrivalTime));

			for (int i = 0; i < processes.size(); i++) {
				EscaletorProcess pr = processes.get(i);

				table2Reference.addRow(new Object[] { String.valueOf(pr.id), String.valueOf(pr.burstTime - pr.progress),
						String.valueOf(pr.arrivalTime), String.valueOf(pr.priority), pr.getProgressFormated(),
						pr.finishTime == -1 ? "Não finalizado" : String.valueOf(pr.finishTime),
						pr.finishTime == -1 ? "Não finalizado" : String.valueOf(pr.finishTime - pr.arrivalTime),
						pr.finishTime == -1 ? "Não finalizado"
								: String.valueOf(pr.finishTime - pr.arrivalTime - pr.burstTime), });
			}
		}

	}

	void attFinshedsProcesses() {
		if (control.finisheds == null) {
			return;
		}

		String finishedProcesses = "";

		for (int i = 0; i < control.finisheds.size(); i++) {
			int id = control.finisheds.get(i);
			finishedProcesses = finishedProcesses + (i == 0 ? "" : ", ") + id;
		}

		finishedsIds.setText("Processos Finalizados: [ " + finishedProcesses + " ]");
	}

	public void attGraph() {
		
		if(control.processesRunnning == null) {
			return;
		}

		DefaultCategoryDataset dados = new DefaultCategoryDataset();

		for (int i = 0; i < control.processesRunnning.size(); i++) {
			EscaletorProcess pr = control.processesRunnning.get(i);

			dados.setValue(pr.arrivalTime, "Time arrival", String.valueOf(pr.id));
			dados.setValue(pr.burstTime, "Burst Time", String.valueOf(pr.id));
			dados.setValue(pr.finishTime == -1 ? 0 : pr.finishTime, "Finish time", String.valueOf(pr.id));
			dados.setValue(pr.finishTime == -1 ? 0 : pr.finishTime - pr.arrivalTime, "Turnaround", String.valueOf(pr.id));
			dados.setValue(pr.finishTime == -1 ? 0 : pr.finishTime - pr.arrivalTime - pr.burstTime, "Tempo médio", String.valueOf(pr.id));
		}

		JFreeChart grafico_barras = ChartFactory.createBarChart("Grafico de processos", "Processos",
				"Unidades de tempo", dados, PlotOrientation.VERTICAL, true, true, false

		);
		
		ChartPanel panel = new ChartPanel(grafico_barras);
		panel.setMouseWheelEnabled(true);
		panel.setPreferredSize(new Dimension(400,200));
		
		
		jPanel3.setLayout(new BorderLayout());
		jPanel3.add(panel,BorderLayout.NORTH);
		
		pack();
		repaint();
		
	
	}

	@Override
	public void run() {

		while (true) {

			try {
				// dormir 5 milisegundos para ir mais devagar
				TimeUnit.MILLISECONDS.sleep(10);

				attTable2();

				totalTime.setText("Tempo total = " + control.time);

				attFinshedsProcesses();
				
				if(control.finished) {
					control.finished = false;
					attGraph();
				}

			} catch (InterruptedException ex) {
				System.out.println(ex);
			}

		}
	}
}
